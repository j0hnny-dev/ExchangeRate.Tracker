//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IExchangeRateClient {
    /**
     * @return Success
     */
    currencies(): Observable<CurrencyDto[]>;
    /**
     * @return Success
     */
    getById(id: number): Observable<ExchangeRateDto>;
    /**
     * @return Success
     */
    getAllByFilter(body: GetByCurrencyRequestPagedRequest): Observable<ExchangeRateDto[]>;
    /**
     * @return Success
     */
    exchangeRates(body: UpdateExchangeRequest): Observable<ExchangeRateDto>;
    /**
     * @return Success
     */
    create(body: CreateExchangeRequest): Observable<ExchangeRateDto>;
    /**
     * @param from (optional) 
     * @param to (optional) 
     * @return Success
     */
    getByCurrency(currency: string, from: Date | undefined, to: Date | undefined): Observable<IMnbExchangeRate[]>;
}

@Injectable()
export class ExchangeRateClient implements IExchangeRateClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    currencies(): Observable<CurrencyDto[]> {
        let url_ = this.baseUrl + "/currencies";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCurrencies(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCurrencies(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CurrencyDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CurrencyDto[]>;
        }));
    }

    protected processCurrencies(response: HttpResponseBase): Observable<CurrencyDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CurrencyDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getById(id: number): Observable<ExchangeRateDto> {
        let url_ = this.baseUrl + "/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExchangeRateDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExchangeRateDto>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ExchangeRateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExchangeRateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    getAllByFilter(body: GetByCurrencyRequestPagedRequest): Observable<ExchangeRateDto[]> {
        let url_ = this.baseUrl + "/exchange-rates";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllByFilter(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllByFilter(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExchangeRateDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExchangeRateDto[]>;
        }));
    }

    protected processGetAllByFilter(response: HttpResponseBase): Observable<ExchangeRateDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExchangeRateDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    exchangeRates(body: UpdateExchangeRequest): Observable<ExchangeRateDto> {
        let url_ = this.baseUrl + "/exchange-rates";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExchangeRates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExchangeRates(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExchangeRateDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExchangeRateDto>;
        }));
    }

    protected processExchangeRates(response: HttpResponseBase): Observable<ExchangeRateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExchangeRateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return Success
     */
    create(body: CreateExchangeRequest): Observable<ExchangeRateDto> {
        let url_ = this.baseUrl + "/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ExchangeRateDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ExchangeRateDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ExchangeRateDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExchangeRateDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param from (optional) 
     * @param to (optional) 
     * @return Success
     */
    getByCurrency(currency: string, from: Date | undefined, to: Date | undefined): Observable<IMnbExchangeRate[]> {
        let url_ = this.baseUrl + "/mnb-exchange-rates?";
        if (currency === undefined || currency === null)
            throw new Error("The parameter 'currency' must be defined and cannot be null.");
        else
            url_ += "Currency=" + encodeURIComponent("" + currency) + "&";
        if (from === null)
            throw new Error("The parameter 'from' cannot be null.");
        else if (from !== undefined)
            url_ += "From=" + encodeURIComponent(from ? "" + from.toISOString() : "") + "&";
        if (to === null)
            throw new Error("The parameter 'to' cannot be null.");
        else if (to !== undefined)
            url_ += "To=" + encodeURIComponent(to ? "" + to.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByCurrency(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByCurrency(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<IMnbExchangeRate[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<IMnbExchangeRate[]>;
        }));
    }

    protected processGetByCurrency(response: HttpResponseBase): Observable<IMnbExchangeRate[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(IMnbExchangeRate.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class CreateExchangeRequest implements ICreateExchangeRequest {
    currency?: string | undefined;
    day?: Date;
    value?: number;
    unit?: number;
    comment?: string | undefined;

    constructor(data?: ICreateExchangeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currency = _data["currency"];
            this.day = _data["day"] ? new Date(_data["day"].toString()) : <any>undefined;
            this.value = _data["value"];
            this.unit = _data["unit"];
            this.comment = _data["comment"];
        }
    }

    static fromJS(data: any): CreateExchangeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateExchangeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currency"] = this.currency;
        data["day"] = this.day ? this.day.toISOString() : <any>undefined;
        data["value"] = this.value;
        data["unit"] = this.unit;
        data["comment"] = this.comment;
        return data;
    }
}

export interface ICreateExchangeRequest {
    currency?: string | undefined;
    day?: Date;
    value?: number;
    unit?: number;
    comment?: string | undefined;
}

export class CurrencyDto implements ICurrencyDto {
    name?: string | undefined;

    constructor(data?: ICurrencyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CurrencyDto {
        data = typeof data === 'object' ? data : {};
        let result = new CurrencyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ICurrencyDto {
    name?: string | undefined;
}

export class ExchangeRateDto implements IExchangeRateDto {
    id?: number;
    day?: Date;
    currency?: string | undefined;
    value?: number;
    unit?: number;
    comment?: string | undefined;

    constructor(data?: IExchangeRateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.day = _data["day"] ? new Date(_data["day"].toString()) : <any>undefined;
            this.currency = _data["currency"];
            this.value = _data["value"];
            this.unit = _data["unit"];
            this.comment = _data["comment"];
        }
    }

    static fromJS(data: any): ExchangeRateDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExchangeRateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["day"] = this.day ? this.day.toISOString() : <any>undefined;
        data["currency"] = this.currency;
        data["value"] = this.value;
        data["unit"] = this.unit;
        data["comment"] = this.comment;
        return data;
    }
}

export interface IExchangeRateDto {
    id?: number;
    day?: Date;
    currency?: string | undefined;
    value?: number;
    unit?: number;
    comment?: string | undefined;
}

export class GetByCurrencyRequest implements IGetByCurrencyRequest {
    currency!: string;
    from?: Date;
    to?: Date;

    constructor(data?: IGetByCurrencyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currency = _data["currency"];
            this.from = _data["from"] ? new Date(_data["from"].toString()) : <any>undefined;
            this.to = _data["to"] ? new Date(_data["to"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetByCurrencyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetByCurrencyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currency"] = this.currency;
        data["from"] = this.from ? this.from.toISOString() : <any>undefined;
        data["to"] = this.to ? this.to.toISOString() : <any>undefined;
        return data;
    }
}

export interface IGetByCurrencyRequest {
    currency: string;
    from?: Date;
    to?: Date;
}

export class GetByCurrencyRequestPagedRequest implements IGetByCurrencyRequestPagedRequest {
    request?: GetByCurrencyRequest;
    skip?: number;
    limit?: number;
    orderBy?: string | undefined;
    isDesc?: boolean;

    constructor(data?: IGetByCurrencyRequestPagedRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.request = _data["request"] ? GetByCurrencyRequest.fromJS(_data["request"]) : <any>undefined;
            this.skip = _data["skip"];
            this.limit = _data["limit"];
            this.orderBy = _data["orderBy"];
            this.isDesc = _data["isDesc"];
        }
    }

    static fromJS(data: any): GetByCurrencyRequestPagedRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetByCurrencyRequestPagedRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["request"] = this.request ? this.request.toJSON() : <any>undefined;
        data["skip"] = this.skip;
        data["limit"] = this.limit;
        data["orderBy"] = this.orderBy;
        data["isDesc"] = this.isDesc;
        return data;
    }
}

export interface IGetByCurrencyRequestPagedRequest {
    request?: GetByCurrencyRequest;
    skip?: number;
    limit?: number;
    orderBy?: string | undefined;
    isDesc?: boolean;
}

export class IMnbExchangeRate implements IIMnbExchangeRate {
    readonly day?: Date;
    readonly currency?: string | undefined;
    readonly value?: number;
    readonly unit?: number;

    constructor(data?: IIMnbExchangeRate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).day = _data["day"] ? new Date(_data["day"].toString()) : <any>undefined;
            (<any>this).currency = _data["currency"];
            (<any>this).value = _data["value"];
            (<any>this).unit = _data["unit"];
        }
    }

    static fromJS(data: any): IMnbExchangeRate {
        data = typeof data === 'object' ? data : {};
        let result = new IMnbExchangeRate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["day"] = this.day ? this.day.toISOString() : <any>undefined;
        data["currency"] = this.currency;
        data["value"] = this.value;
        data["unit"] = this.unit;
        return data;
    }
}

export interface IIMnbExchangeRate {
    day?: Date;
    currency?: string | undefined;
    value?: number;
    unit?: number;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class UpdateExchangeRequest implements IUpdateExchangeRequest {
    id?: number;
    currency?: string | undefined;
    day?: Date;
    value?: number;
    unit?: number;
    comment?: string | undefined;

    constructor(data?: IUpdateExchangeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.currency = _data["currency"];
            this.day = _data["day"] ? new Date(_data["day"].toString()) : <any>undefined;
            this.value = _data["value"];
            this.unit = _data["unit"];
            this.comment = _data["comment"];
        }
    }

    static fromJS(data: any): UpdateExchangeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateExchangeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["currency"] = this.currency;
        data["day"] = this.day ? this.day.toISOString() : <any>undefined;
        data["value"] = this.value;
        data["unit"] = this.unit;
        data["comment"] = this.comment;
        return data;
    }
}

export interface IUpdateExchangeRequest {
    id?: number;
    currency?: string | undefined;
    day?: Date;
    value?: number;
    unit?: number;
    comment?: string | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return _observableThrow(new ApiException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}